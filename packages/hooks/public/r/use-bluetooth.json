{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-bluetooth",
  "type": "registry:block",
  "title": "Use Bluetooth",
  "author": "Damien Schneider",
  "description": "A hook to interact with Bluetooth devices via Web Bluetooth API",
  "files": [
    {
      "path": "src/use-bluetooth/index.ts",
      "content": "\"use client\";\n//This requires @types/web-bluetooth package to be installed\nimport { useState, useEffect, useCallback } from \"react\";\n\ninterface UseBluetoothRequestDeviceOptions {\n  filters?: BluetoothLEScanFilter[];\n  optionalServices?: BluetoothServiceUUID[];\n}\n\ninterface UseBluetoothOptions extends UseBluetoothRequestDeviceOptions {\n  acceptAllDevices?: boolean;\n  navigator?: Navigator;\n}\n\nexport function useBluetooth(options?: UseBluetoothOptions) {\n  const windowVar = typeof window !== \"undefined\" ? window : undefined;\n  const {\n    acceptAllDevices = false,\n    filters = undefined,\n    optionalServices = undefined,\n    navigator = windowVar?.navigator,\n  } = options || {};\n\n  const [device, setDevice] = useState<BluetoothDevice | undefined>();\n  const [server, setServer] = useState<BluetoothRemoteGATTServer | undefined>();\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState<unknown | null>(null);\n\n  const isSupported = Boolean(navigator && \"bluetooth\" in navigator);\n\n  const reset = useCallback(() => {\n    setIsConnected(false);\n    setDevice(undefined);\n    setServer(undefined);\n  }, []);\n\n  const connectToBluetoothGATTServer = useCallback(async () => {\n    setError(null);\n\n    if (device?.gatt) {\n      try {\n        const newServer = await device.gatt.connect();\n        setServer(newServer);\n        setIsConnected(newServer.connected);\n      } catch (err) {\n        setError(err);\n      }\n    }\n  }, [device]);\n\n  const requestDevice = async () => {\n    if (!isSupported) {\n      return;\n    }\n\n    setError(null);\n    let effectiveAcceptAllDevices = acceptAllDevices;\n\n    if (filters && filters.length > 0) {\n      effectiveAcceptAllDevices = false;\n    }\n\n    try {\n      const newDevice = await navigator?.bluetooth.requestDevice({\n        acceptAllDevices: effectiveAcceptAllDevices,\n        filters,\n        optionalServices,\n      });\n      setDevice(newDevice);\n    } catch (err) {\n      setError(err);\n    }\n  };\n\n  useEffect(() => {\n    if (device) {\n      connectToBluetoothGATTServer();\n\n      // Add disconnect listener\n      const handleDisconnect = () => reset();\n      device.addEventListener(\"gattserverdisconnected\", handleDisconnect);\n\n      return () => {\n        device.removeEventListener(\"gattserverdisconnected\", handleDisconnect);\n      };\n    }\n  }, [device, connectToBluetoothGATTServer, reset]);\n\n  // Connect on mount if device exists\n  useEffect(() => {\n    if (device) {\n      device.gatt?.connect();\n    }\n  }, [device]);\n\n  // Disconnect on unmount\n  useEffect(() => {\n    return () => {\n      if (device) {\n        device.gatt?.disconnect();\n      }\n    };\n  }, [device]);\n\n  return {\n    isSupported,\n    isConnected,\n    device,\n    requestDevice,\n    server,\n    error,\n  };\n}\n\nexport interface UseBluetoothReturn {\n  isSupported: boolean;\n  isConnected: boolean;\n  device: BluetoothDevice | undefined;\n  requestDevice: () => Promise<void>;\n  server: BluetoothRemoteGATTServer | undefined;\n  error: unknown | null;\n}\n",
      "type": "registry:component"
    }
  ]
}