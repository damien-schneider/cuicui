{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-event-listener",
  "type": "registry:block",
  "title": "Use Event Listener",
  "author": "Damien Schneider",
  "description": "A hook to add event listeners to DOM elements with proper cleanup",
  "files": [
    {
      "path": "src/use-event-listener/index.ts",
      "content": "\"use client\";\nimport { useEffect, useRef } from \"react\";\n\nimport type { RefObject } from \"react\";\n\nimport { useIsomorphicLayoutEffect } from \"@/cuicui/hooks/use-isomorphic-layout-effect\";\n// MediaQueryList Event based useEventListener interface\nfunction useEventListener<K extends keyof MediaQueryListEventMap>(\n\teventName: K,\n\thandler: (event: MediaQueryListEventMap[K]) => void,\n\telement: RefObject<MediaQueryList>,\n\toptions?: boolean | AddEventListenerOptions,\n): void;\n\n// Window Event based useEventListener interface\nfunction useEventListener<K extends keyof WindowEventMap>(\n\teventName: K,\n\thandler: (event: WindowEventMap[K]) => void,\n\telement?: undefined,\n\toptions?: boolean | AddEventListenerOptions,\n): void;\n\n// Element Event based useEventListener interface\nfunction useEventListener<\n\tK extends keyof HTMLElementEventMap & keyof SVGElementEventMap,\n\tT extends Element = K extends keyof HTMLElementEventMap\n\t\t? HTMLDivElement\n\t\t: SVGElement,\n>(\n\teventName: K,\n\thandler:\n\t\t| ((event: HTMLElementEventMap[K]) => void)\n\t\t| ((event: SVGElementEventMap[K]) => void),\n\telement: RefObject<T | null>,\n\toptions?: boolean | AddEventListenerOptions,\n): void;\n\n// Document Event based useEventListener interface\nfunction useEventListener<K extends keyof DocumentEventMap>(\n\teventName: K,\n\thandler: (event: DocumentEventMap[K]) => void,\n\telement: RefObject<Document>,\n\toptions?: boolean | AddEventListenerOptions,\n): void;\n\nfunction useEventListener<\n\tKW extends keyof WindowEventMap,\n\tKH extends keyof HTMLElementEventMap & keyof SVGElementEventMap,\n\tKM extends keyof MediaQueryListEventMap,\n\tT extends HTMLElement | SVGAElement | MediaQueryList = HTMLElement,\n>(\n\teventName: KW | KH | KM,\n\thandler: (\n\t\tevent:\n\t\t\t| WindowEventMap[KW]\n\t\t\t| HTMLElementEventMap[KH]\n\t\t\t| SVGElementEventMap[KH]\n\t\t\t| MediaQueryListEventMap[KM]\n\t\t\t| Event,\n\t) => void,\n\telement?: RefObject<T>,\n\toptions?: boolean | AddEventListenerOptions,\n) {\n\t// Create a ref that stores handler\n\tconst savedHandler = useRef(handler);\n\n\tuseIsomorphicLayoutEffect(() => {\n\t\tsavedHandler.current = handler;\n\t}, [handler]);\n\n\tuseEffect(() => {\n\t\t// Define the listening target\n\t\tconst targetElement: T | Window = element?.current ?? window;\n\n\t\tif (!targetElement?.addEventListener) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Create event listener that calls handler function stored in ref\n\t\tconst listener: typeof handler = (event) => {\n\t\t\tsavedHandler.current(event);\n\t\t};\n\n\t\ttargetElement.addEventListener(eventName, listener, options);\n\n\t\t// Remove event listener on cleanup\n\t\treturn () => {\n\t\t\ttargetElement.removeEventListener(eventName, listener, options);\n\t\t};\n\t}, [eventName, element, options]);\n}\n\nexport { useEventListener };\n",
      "type": "registry:component"
    }
  ]
}